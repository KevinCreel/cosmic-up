# Manage APT packages (Ubuntu/Debian)
- name: Manage apt packages
  become: true
  block:
    # Add PPAs for additional repositories
    - name: Add PPAs
      ansible.builtin.apt_repository:
        validate_certs: false
        repo: "{{ item }}"
        state: present
      loop: "{{ manage_packages_apt.ppas }}"

    # Update package cache
    - name: Update cache
      ansible.builtin.apt:
        update_cache: true

    # Install packages
    - name: Install packages
      ansible.builtin.apt:
        name: "{{ manage_packages_apt.install }}"
        state: present
      when: manage_packages_apt.install | length > 0

    # Remove packages
    - name: Remove packages
      ansible.builtin.apt:
        name: "{{ manage_packages_apt.remove }}"
        state: absent

# Manage Snap packages
- name: Manage snap packages
  become: true
  block:
    # Install classic snap packages
    - name: Install classic snaps
      community.general.snap:
        channel: "{{ manage_packages_snap.channel }}"
        name: "{{ manage_packages_snap.install.snap_classic }}"
        state: present
        classic: true

    # Install regular snap packages
    - name: Install snaps
      community.general.snap:
        channel: "{{ manage_packages_snap.channel }}"
        name: "{{ manage_packages_snap.install.snap }}"
        state: present

    # Remove snap packages
    - name: Remove snaps
      community.general.snap:
        name: "{{ manage_packages_snap.remove }}"
        state: absent

# Configure Flatpak repository
- name: Add flathub remote
  become: true
  community.general.flatpak_remote:
    name: flathub
    flatpakrepo_url: https://dl.flathub.org/repo/flathub.flatpakrepo
    state: present

# Manage Flatpak packages
- name: Install flatpaks
  community.general.flatpak:
    name: "{{ manage_packages_flatpak.install }}"
    state: present

# Remove Flatpak packages
- name: Remove flatpaks
  community.general.flatpak:
    name: "{{ manage_packages_flatpak.remove }}"
    state: absent
  when: manage_packages_flatpak.remove | length > 0

# Install Rust/Cargo packages
- name: Install cargo packages
  community.general.cargo:
    name: "{{ manage_packages_cargo }}"
    state: present

# Install Python packages via pipx
- name: Install pipx packages
  community.general.pipx:
    name: "{{ item }}"
    state: present
  with_items: "{{ manage_packages_pipx }}"

# You can use Gear Lever (installed) for AppImage management
- name: Download AppImages
  ansible.builtin.get_url:
    url: "{{ item }}"
    dest: "{{ user_apps_dir }}/{{ item | basename }}"
    mode: '700'
  loop: "{{ manage_packages_appimage }}"

# Download and install deb packages
- name: Download deb packages
  ansible.builtin.get_url:
    url: "{{ item }}"
    dest: "{{ tmp_downloads_dir }}/{{ item | regex_replace('^.*/', '') }}"
    mode: '644'
  register: deb_download_result
  retries: 3
  delay: 10
  until: deb_download_result is succeeded
  loop: "{{ manage_packages_deb_urls }}"
  loop_control:
    label: "{{ item }}"

- name: Install deb packages
  become: true
  ansible.builtin.apt:
    deb: "{{ tmp_downloads_dir }}/{{ item | regex_replace('^.*/', '') }}"
    state: present
  with_items: "{{ manage_packages_deb_urls }}"
